{"version":3,"sources":["webpack:///./recipes/components/NewRecipe.js"],"names":["NewRecipe","props","auth","useContext","AuthContext","history","useHistory","useForm","title","value","isValid","image","name","amount","measure","content","readyInMinutes","servings","price","formState","inputHandler","useState","ingredients","setIngredients","ingredientCount","setIngredientCount","instructionCount","setInstructionCount","instructions","setInstructions","ingredientData","setIngredientData","instructionData","setInstructionData","show","setShow","handleClose","errorMessage","setErrorMessage","isIngredientSaved","setIsIngredietSaved","isInstructionSaved","setIsInstructionSaved","handleSubmit","e","a","preventDefault","formData","FormData","append","inputs","JSON","stringify","userId","axios","post","process","headers","Authorization","token","responseData","console","log","push","response","data","message","className","onHide","Header","closeButton","Title","Body","Footer","variant","onClick","border","onSubmit","sm","element","type","id","label","validators","VALIDATOR_REQUIRE","errorText","placeholder","onInput","size","block","prev","map","index","key","addIngredientHandler","newArr","isSavedArr","iName","handleSaveIngredient","onInputHandler","deleteIngredientHandler","filter","ingredient","handleIngredientRemove","iId","isSaved","addInstructionHandler","handleSaveInstruction","deleteInstruction","instruction","handleInstructionRemove"],"mappings":"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","file":"23.bundle.js","sourcesContent":["import React ,{useContext, useState ,useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {Container,Form,Row,Col,Card,Modal,Button} from 'react-bootstrap'\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload'\r\nimport Input from '../../shared/components/FormElements/Input'\r\nimport {useForm} from '../../shared/hooks/form-hooks'\r\nimport {VALIDATOR_MINLENGTH,VALIDATOR_EMAIL, VALIDATOR_REQUIRE}  from '../../shared/util/validators'\r\nimport './NewRecipe.css'\r\nimport Ingredient from './Ingredient'\r\nimport Instruction  from './Instruction'\r\nimport {AuthContext} from '../../shared/context/auth-context'\r\n\r\n\r\n const NewRecipe = props => {\r\n    const auth  = useContext(AuthContext)\r\n    const history = useHistory()\r\n    const [formState,inputHandler, setFormData]= useForm({\r\n      title:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      image:{\r\n        value:null,\r\n        isValid:false\r\n      },\r\n      name:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      amount:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      measure:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      content:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      readyInMinutes:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      servings:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      price:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n    },false)\r\n    const [ingredients,setIngredients] = useState([])\r\n    const [ingredientCount,setIngredientCount] = useState(0)\r\n    const [instructionCount, setInstructionCount] = useState(0)\r\n    const [instructions, setInstructions] = useState([])\r\n    const [ingredientData,setIngredientData] = useState([])\r\n    const [instructionData, setInstructionData] = useState([])\r\n    const [show, setShow] = useState(false);                                 //Error modal\r\n    const handleClose = () => setShow(false);                                // We  use this for closing the modal.\r\n    const handleShow = () => setShow(true);                                  // We use this for showing the modal.\r\n    const [errorMessage,setErrorMessage] = useState('')\r\n    const [isIngredientSaved,setIsIngredietSaved] = useState([])\r\n    const [isInstructionSaved,setIsInstructionSaved] = useState([])\r\n\r\n        \r\n    const addIngredient = () => {\r\n      \r\n        setIngredients(prev => [...prev,ingredientCount])\r\n        setIngredientCount(ingredientCount=> ingredientCount + 1)\r\n       \r\n    }\r\n    const addInstruction = () => {\r\n    \r\n        setInstructions(prev => [...prev, instructionCount])\r\n        setInstructionCount(instructionCount => instructionCount + 1)\r\n    }\r\n    const handleIngredientRemove = (index) => {\r\n      let isSavedArr = [...isIngredientSaved]\r\n        setIngredients(ingredients.filter(ingredient => ingredient !== index))\r\n        setIngredientCount(ingredientCount => ingredientCount - 1)   \r\n        isSavedArr[index] = false\r\n        setIsIngredietSaved(isSavedArr)  \r\n    }\r\n    const handleInstructionRemove = (index) => {\r\n        let isSavedArr= [...isInstructionSaved]\r\n        setInstructions(instructions.filter(instruction => instruction !== index))\r\n        setInstructionCount(instructionCount => instructionCount - 1)\r\n        isSavedArr[index]= false\r\n        setIsInstructionSaved(isSavedArr)\r\n      \r\n    }\r\n    const handleSaveIngredient = (index) => {\r\n\r\n        let  newArr = [...ingredientData]\r\n        let isSavedArr = [...isIngredientSaved]\r\n\r\n\r\n        if(formState.inputs.iName.value !== '' && formState.inputs.amount.value !== '' && formState.inputs.measure.value !== ''  ){\r\n          newArr[index] = {name:formState.inputs.iName.value,amount:formState.inputs.amount.value,measure:formState.inputs.measure.value}\r\n          setIngredientData(newArr)\r\n          isSavedArr[index] = true\r\n          setIsIngredietSaved(isSavedArr)\r\n        }\r\n        else{\r\n          setErrorMessage('Make sure fill all inputs ...')\r\n          isSavedArr[index] = false\r\n          setIsIngredietSaved(isSavedArr)\r\n          setShow(true);\r\n        }\r\n        \r\n        \r\n    }\r\n    const handleSaveInstruction = (index) => {\r\n      let newArr = [...instructionData]\r\n      let isSavedArr= [...isInstructionSaved]\r\n\r\n      if(formState.inputs.content.value !== ''){\r\n        newArr[index] = {content:formState.inputs.content.value}\r\n        setInstructionData(newArr)\r\n        isSavedArr[index]= true\r\n        setIsInstructionSaved(isSavedArr)\r\n      }\r\n      else{\r\n        setErrorMessage('Make sure fill all inputs ...')\r\n        isSavedArr[index]= false\r\n        setIsInstructionSaved(isSavedArr)\r\n        setShow(true);\r\n      }\r\n\r\n     \r\n    }\r\n    const handleSubmit =  async e => {\r\n\r\n        e.preventDefault()     \r\n        try{\r\n\r\n            const formData = new FormData()\r\n            formData.append('title',formState.inputs.title.value)\r\n            formData.append('image',formState.inputs.image.value)\r\n            formData.append('ingredients',JSON.stringify(ingredientData))\r\n            formData.append(\"instructions\",JSON.stringify(instructionData))\r\n            formData.append('readyInMinutes',formState.inputs.readyInMinutes.value)\r\n            formData.append('servings',formState.inputs.servings.value)\r\n            formData.append('price',formState.inputs.price.value)\r\n            formData.append('creator',auth.userId)\r\n            \r\n            const responseData = await axios.post(\r\n                process.env.REACT_APP_BACKEND_URL+'/recipes/new',\r\n                 formData,{\r\n                 headers: {Authorization : `Bearer ${auth.token}`} })\r\n                 console.log(responseData)\r\n            \r\n            history.push('/recipes/all')\r\n\r\n          }\r\n\r\n        catch(err){\r\n          console.log(err)\r\n          setErrorMessage(err.response.data.message)\r\n          setShow(true);\r\n        }\r\n    }\r\n    return (\r\n      <div className='recipe-container'>\r\n         <div className='recipe-main'>\r\n            <div>-</div>\r\n           {show && <Modal show={show} onHide={handleClose}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Error Message</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{errorMessage}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>} \r\n            <Container className='new-recipe-container' >\r\n                <Card  border=\"secondary\" className='recipe-form'>\r\n                    <Form className='form-container' onSubmit={handleSubmit} >\r\n                      <Row>\r\n                        <Col sm={6}>\r\n                        <Input \r\n                            element='input'\r\n                            type='text'\r\n                            id='title'\r\n                            name='title'\r\n                            label='Title'\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText='Please enter a title...'\r\n                            placeholder='Please enter a title...'\r\n                            onInput={inputHandler}\r\n                        />\r\n                        <Input \r\n                            element='input'\r\n                            type='number'\r\n                            id='readyInMinutes'\r\n                            name='readyInMinutes'\r\n                            label='ReadyInMinutes'\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText='Please enter a readyInMinutes...'\r\n                            placeholder='Please enter a readyInMinutes...'\r\n                            onInput={inputHandler}\r\n                        /> \r\n                        <Input \r\n                            element='input'\r\n                            type='number'\r\n                            id='servings'\r\n                            name='servings'\r\n                            label='Servings'\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText='Please enter a servings...'\r\n                            placeholder='Please enter a servings...'\r\n                            onInput={inputHandler}\r\n                        />\r\n                        <Input \r\n                            element='input'\r\n                            type='number'\r\n                            id='price'\r\n                            name='price'\r\n                            label='Price'\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText='Please enter a price...'\r\n                            placeholder='Please enter a price...'\r\n                            onInput={inputHandler}\r\n                        />\r\n                        <Button className='increment-btn' size=\"lg\" block onClick={addIngredient}>\r\n                            Add Ingredient\r\n                        </Button>\r\n                        {ingredients.map(index => {\r\n                            return  <Ingredient \r\n                            key={index}\r\n                            addIngredientHandler={() => handleSaveIngredient(index)}\r\n                            onInputHandler={inputHandler}\r\n                            deleteIngredientHandler={() => handleIngredientRemove(index)} iId={index} \r\n                            isSaved = {isIngredientSaved[index]}\r\n                        />\r\n                           \r\n                        }\r\n                        )}\r\n                        </Col>\r\n                        <Col sm={6}>\r\n                          <ImageUpload\r\n                                  id='image' \r\n                                  name='image'\r\n                                  validators={[VALIDATOR_REQUIRE()]}\r\n                                  errorText='Please import an image file.'\r\n                                  onInput={inputHandler}\r\n                          />\r\n                          <Button className='increment-btn'  size=\"lg\" block onClick={addInstruction}>\r\n                              Add Instruction\r\n                          </Button>\r\n                          {instructions.map(index => {\r\n                              return  <Instruction \r\n                              key={index} iId={index}\r\n                              onInputHandler={inputHandler}\r\n                              addInstructionHandler = {() => handleSaveInstruction(index)}\r\n                              deleteInstruction={() => handleInstructionRemove(index)} \r\n                              isSaved = {isInstructionSaved[index]}\r\n                              />\r\n                              \r\n                          })}\r\n                        </Col>\r\n                      \r\n                      </Row>\r\n                      <Button  type='submit' className='submit-btn' size=\"lg\" block >Add Recipe</Button>\r\n                    </Form>\r\n                </Card>\r\n            </Container>\r\n        </div>\r\n        \r\n      </div>\r\n       \r\n    )\r\n}\r\nexport default NewRecipe"],"sourceRoot":""}