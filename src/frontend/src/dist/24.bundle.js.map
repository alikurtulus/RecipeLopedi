{"version":3,"sources":["webpack:///./recipes/components/RecipeEdit.js"],"names":["RecipeEdit","props","auth","useContext","AuthContext","history","useHistory","location","useLocation","console","log","state","data","useState","selectedRecipe","useForm","title","value","isValid","image","name","amount","measure","content","readyInMinutes","servings","price","formState","inputHandler","ingredients","setIngredients","length","ingredientCount","setIngredientCount","instructions","instructionCount","setInstructionCount","setInstructions","ingredientData","setIngredientData","instructionData","setInstructionData","show","setShow","handleClose","errorMessage","setErrorMessage","handleSubmit","e","a","preventDefault","formData","FormData","append","inputs","JSON","stringify","userId","axios","put","process","id","headers","Authorization","token","push","err","response","message","className","onHide","Header","closeButton","Title","Body","Footer","variant","onClick","border","onSubmit","sm","element","type","label","validators","VALIDATOR_REQUIRE","errorText","placeholder","onInput","initialValue","initialValid","size","block","prev","map","index","key","iId","addIngredientHandler","newArr","iName","handleSaveIngredient","onInputHandler","deleteIngredientHandler","filter","ingredient","handleIngredientRemove","addInstructionHandler","handleSaveInstruction","deleteInstruction","instruction","handleInstructionRemove"],"mappings":"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","file":"24.bundle.js","sourcesContent":["import React ,{useContext, useState ,useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport { useParams, useLocation} from \"react-router\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {Container,Form,Row,Col,Card,Modal,Button} from 'react-bootstrap'\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload'\r\nimport Input from '../../shared/components/FormElements/Input'\r\nimport {useForm} from '../../shared/hooks/form-hooks'\r\nimport {VALIDATOR_MINLENGTH,VALIDATOR_EMAIL, VALIDATOR_REQUIRE}  from '../../shared/util/validators'\r\nimport './NewRecipe.css'\r\nimport Ingredient from './Ingredient'\r\nimport Instruction  from './Instruction'\r\nimport {AuthContext} from '../../shared/context/auth-context'\r\n\r\n\r\n const RecipeEdit = props => {\r\n    const auth  = useContext(AuthContext)\r\n    const history = useHistory()\r\n    const location = useLocation()\r\n    console.log(location.state.data)\r\n    const [selectedRecipe,setSelectedRecipe] = useState(location.state.data)\r\n    \r\n    const [formState,inputHandler, setFormData]= useForm({\r\n      title:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      image:{\r\n        value:null,\r\n        isValid:false\r\n      },\r\n      name:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      amount:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      measure:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      content:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      readyInMinutes:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      servings:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n      price:{\r\n        value:\"\",\r\n        isValid:false\r\n      },\r\n    },false)\r\n    const [ingredients,setIngredients] = useState(location.state.data.ingredients)\r\n    const [ingredientCount,setIngredientCount] = useState(location.state.data.ingredients.length)\r\n    const [instructionCount, setInstructionCount] = useState(location.state.data.instructions.length)\r\n    const [instructions, setInstructions] = useState(location.state.data.instructions)\r\n    const [ingredientData,setIngredientData] = useState(location.state.data.ingredients)\r\n    const [instructionData, setInstructionData] = useState(location.state.data.instructions)\r\n    const [show, setShow] = useState(false);                                 //Error modal\r\n    const handleClose = () => setShow(false);                                // We  use this for closing the modal.\r\n    const handleShow = () => setShow(true);                                  // We use this for showing the modal.\r\n    const [errorMessage,setErrorMessage] = useState('')\r\n\r\n    console.log(selectedRecipe)\r\n    const addIngredient = () => {\r\n      \r\n        setIngredients(prev => [...prev,ingredientCount])\r\n        setIngredientCount(ingredientCount=> ingredientCount + 1)\r\n     \r\n    }\r\n    const addInstruction = () => {\r\n    \r\n        setInstructions(prev => [...prev, instructionCount])\r\n        setInstructionCount(instructionCount => instructionCount + 1)\r\n    }\r\n    const handleIngredientRemove = (index) => {\r\n        setIngredients(ingredients.filter(ingredient => ingredient !== index))\r\n        setIngredientCount(ingredientCount => ingredientCount - 1)   \r\n    }\r\n    const handleInstructionRemove = (index) => {\r\n        setInstructions(instructions.filter(instruction => instruction !== index))\r\n        setInstructionCount(instructionCount => instructionCount - 1)  \r\n    }\r\n    const handleSaveIngredient = (index) => {\r\n\r\n        let  newArr = [...ingredientData]\r\n        newArr[index] = {name:formState.inputs.iName.value,amount:formState.inputs.amount.value,measure:formState.inputs.measure.value}\r\n         setIngredientData(newArr)\r\n       \r\n    }\r\n    const handleSaveInstruction = (index) => {\r\n      let newArr = [...instructionData]\r\n      newArr[index] = {content:formState.inputs.content.value}\r\n      setInstructionData(newArr)\r\n      \r\n    }\r\n    const handleSubmit =  async e => {\r\n       \r\n        e.preventDefault()     \r\n        try{\r\n\r\n            const formData = new FormData()\r\n            formData.append('title',formState.inputs.title.value)\r\n            formData.append('image',formState.inputs.image.value)\r\n            formData.append('ingredients',JSON.stringify(ingredientData))\r\n            formData.append(\"instructions\",JSON.stringify(instructionData))\r\n            formData.append('readyInMinutes',formState.inputs.readyInMinutes.value)\r\n            formData.append('servings',formState.inputs.servings.value)\r\n            formData.append('price',formState.inputs.price.value)\r\n            formData.append('creator',auth.userId)\r\n            \r\n            const responseData = await axios.put(\r\n                process.env.REACT_APP_BACKEND_URL+`/recipes/${selectedRecipe.id}`,\r\n                 formData,{\r\n                 headers: {Authorization : `Bearer ${auth.token}`} })\r\n              \r\n            if(responseData) {\r\n                history.push('/recipes/all')\r\n            }\r\n            else{\r\n                setErrorMessage(err.response.data.message)\r\n                setShow(true);\r\n            }\r\n           \r\n\r\n          }\r\n\r\n        catch(err){\r\n        \r\n          setErrorMessage(err.response.data.message)\r\n          setShow(true);\r\n        }\r\n    }\r\n    return (\r\n        <div className='recipe-main'>\r\n            <h3>-</h3>\r\n           {show && <Modal show={show} onHide={handleClose}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Error Message</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{errorMessage}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>} \r\n            <Container className='new-recipe-container' >\r\n                <Card  border=\"secondary\" className='recipe-form'>\r\n                    <Form className='form-container' onSubmit={handleSubmit} >\r\n                      <Row>\r\n                        <Col sm={6}>\r\n                            <Input \r\n                                element='input'\r\n                                type='text'\r\n                                id='title'\r\n                                name='title'\r\n                                label='Title'\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                errorText='Please enter a title...'\r\n                                placeholder='Please enter a title...'\r\n                                onInput={inputHandler}\r\n                                initialValue={selectedRecipe.title}\r\n                                initialValid={true}\r\n                                \r\n                            />\r\n                            <Input \r\n                                element='input'\r\n                                type='number'\r\n                                id='readyInMinutes'\r\n                                name='readyInMinutes'\r\n                                label='ReadyInMinutes'\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                errorText='Please enter a readyInMinutes...'\r\n                                placeholder='Please enter a readyInMinutes...'\r\n                                onInput={inputHandler}\r\n                                initialValue={selectedRecipe.readyInMinutes}\r\n                                initialValid={true}\r\n                            /> \r\n                            <Input \r\n                                element='input'\r\n                                type='number'\r\n                                id='servings'\r\n                                name='servings'\r\n                                label='Servings'\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                errorText='Please enter a servings...'\r\n                                placeholder='Please enter a servings...'\r\n                                onInput={inputHandler}\r\n                                initialValue={selectedRecipe.servings}\r\n                                initialValid={true}\r\n                            />\r\n                            <Input \r\n                                element='input'\r\n                                type='number'\r\n                                id='price'\r\n                                name='price'\r\n                                label='Price'\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                errorText='Please enter a price...'\r\n                                placeholder='Please enter a price...'\r\n                                onInput={inputHandler}\r\n                                initialValue={selectedRecipe.price}\r\n                                initialValid={true}\r\n                            />\r\n                        <Button className='increment-btn' variant=\"warning\" size=\"lg\" block onClick={addIngredient}>\r\n                            Add Ingredient\r\n                        </Button>\r\n                        {ingredients.map(index => {\r\n                            return <Ingredient \r\n                             key={index}\r\n                             iId={index}\r\n                             initialValue={selectedRecipe.ingredients}\r\n                             initialValid={true}\r\n                             addIngredientHandler={() => handleSaveIngredient(index)}\r\n                             onInputHandler={inputHandler}\r\n                             deleteIngredientHandler={() => handleIngredientRemove(index)} iId={index} />\r\n                        }\r\n                        )}\r\n                        </Col>\r\n                        <Col sm={6}>\r\n                        <ImageUpload\r\n                                id='image' \r\n                                name='image'\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                errorText='Please import an image file.'\r\n                                onInput={inputHandler}\r\n                        />\r\n                        <Button className='increment-btn' variant=\"warning\" size=\"lg\" block onClick={addInstruction}>\r\n                            Add Instruction\r\n                        </Button>\r\n                        {instructions.map(index => {\r\n                            return   <Instruction \r\n                            key={index} iId={index}\r\n                            onInputHandler={inputHandler}\r\n                            addInstructionHandler = {() => handleSaveInstruction(index)}\r\n                            deleteInstruction={() => handleInstructionRemove(index)} />\r\n                        })}\r\n                        </Col>\r\n                      \r\n                      </Row>\r\n                      <Button  type='submit' className='submit-btn' size=\"lg\" block >Update Recipe</Button>\r\n                    </Form>\r\n                </Card>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\nexport default RecipeEdit"],"sourceRoot":""}